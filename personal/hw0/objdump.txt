• What file format is used for this binary? And what architecture is it c\
ompiled for?
  file format elf64-x86-64
  architecture: i386:x86-64, flags 0x00000112

• What are some of the names of segment/sections you find?
  Idx Name          Size      VMA               LMA               File of\
f  Algn
  0 .interp       0000001c  0000000000400238  0000000000400238  00000238 \
 2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.ABI-tag 00000020  0000000000400254  0000000000400254  00000254 \
 2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000400274  0000000000400274  0000\
0274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .gnu.hash     0000001c  0000000000400298  0000000000400298  00000298 \
 2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .dynsym       000000a8  00000000004002b8  00000000004002b8  000002b8 \
 2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynstr       00000055  0000000000400360  0000000000400360  00000360 \
 2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .gnu.version  0000000e  00000000004003b6  00000000004003b6  000003b6 \
 2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version_r 00000020  00000000004003c8  00000000004003c8  000003c8\
  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .rela.dyn     00000018  00000000004003e8  00000000004003e8  000003e8 \
 2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.plt     00000090  0000000000400400  0000000000400400  00000400 \
 2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .init         0000001a  0000000000400490  0000000000400490  00000490 \
 2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .plt          00000070  00000000004004b0  00000000004004b0  000004b0 \
 2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text         00000242  0000000000400520  0000000000400520  00000520 \
 2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .fini         00000009  0000000000400764  0000000000400764  00000764 \
 2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .rodata       00000013  0000000000400770  0000000000400770  00000770 \
 2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .eh_frame_hdr 00000034  0000000000400784  0000000000400784  00000784 \
 2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .eh_frame     000000f4  00000000004007b8  00000000004007b8  000007b8 \
 2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 .init_array   00000008  0000000000600e10  0000000000600e10  00000e10 \
 2**3
                  CONTENTS, ALLOC, LOAD, DATA
 18 .fini_array   00000008  0000000000600e18  0000000000600e18  00000e18 \
 2**3
                  CONTENTS, ALLOC, LOAD, DATA
 19 .jcr          00000008  0000000000600e20  0000000000600e20  00000e20 \
 2**3
                  CONTENTS, ALLOC, LOAD, DATA
 20 .dynamic      000001d0  0000000000600e28  0000000000600e28  00000e28 \
 2**3
                  CONTENTS, ALLOC, LOAD, DATA
 21 .got          00000008  0000000000600ff8  0000000000600ff8  00000ff8 \
 2**3
                  CONTENTS, ALLOC, LOAD, DATA
 22 .got.plt      00000048  0000000000601000  0000000000601000  00001000 \
 2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .data         00000010  0000000000601048  0000000000601048  00001048 \
 2**3
                  CONTENTS, ALLOC, LOAD, DATA
 24 .bss          00000008  0000000000601058  0000000000601058  00001058 \
 2**0
                  ALLOC
 25 .comment      0000002b  0000000000000000  0000000000000000  00001058 \
 2**0
                  CONTENTS, READONLY
 26 .debug_aranges 00000030  0000000000000000  0000000000000000  00001083\
  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .debug_info   00000321  0000000000000000  0000000000000000  000010b3 \
 2**0
                  CONTENTS, READONLY, DEBUGGING
 28 .debug_abbrev 000000da  0000000000000000  0000000000000000  000013d4 \
 2**0
                  CONTENTS, READONLY, DEBUGGING
 29 .debug_line   000000eb  0000000000000000  0000000000000000  000014ae \
 2**0
                  CONTENTS, READONLY, DEBUGGING
 30 .debug_str    0000025a  0000000000000000  0000000000000000  00001599 \
 2**0
                  CONTENTS, READONLY, DEBUGGING

• What segment/section contains main (the function) and what is the addre\
ss of main? (It should be the same as what you saw in gdb)
  .text
  000000000040060d

• Do you see the stack segment anywhere? What about the heap? Explain.
  No. They should be allocated at run time.
